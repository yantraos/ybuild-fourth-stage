
Instructions for Raspberry Pi 4 !ONLY!

1)

#Set some env vars to make copy/paste easier, ( change as needed for your setup ).
#Folders should be pre created, change paths to suit,
#Use sudo where necessary to create links etc.
#It will be assumed that your LFS partition is mounted on /mnt/LFS, using /dev/mmcblk0p11 <--- You MUST set this correctly!

LFS=/mnt/LFS
yversion=9.0
SOURCEARCHIVES=/ysarchives/$yversion
PKGARCHIVES=/ybpackages/$yversion
EXTFOLDER=
KERNELVERSION=4.19
PIVERS=4
PIBUILD=1
PIBOOTDEV=/dev/mmcblk0p10
PIROOTDEV=/dev/mmcblk0p11
#While building tools
COMPILEAT=$yantra/$SOURCEARCHIVES

export LFS
export yversion
export SOURCEARCHIVES
export PKGARCHIVES
export EXTFOLDER
export KERNELVERSION
export PIVERS
export PIBUILD
export PIBOOTDEV
export PIROOTDEV
export COMPILEAT

sudo mount /dev/mmcblk0p11 $yantra
sudo mkdir -vp $SOURCEARCHIVES $PKGARCHIVES

#If compiling on raspberian you need to install some extra files like so:
apt-get update
apt-get install bison gawk m4 texinfo
#Also make sure /bin/sh points to /bin/bash

#Get the build scripts and helper scripts from:
#https://github.com/KeithDHedger/yinstalBuilds
#either via git clone or downloading the zip file and unpacking it.
#you should place the yinstalBuildScripts and yinscripts folder in the root of what will be your new LFS eg ${LFS}/yinstalBuildScripts

2)
###RECOMMENDED####
#or cd into the mounted partition wher you intend to build LFS:
#LFS should point to your mounted LFS partition ( eg LFS=/mnt/LFS ).
cd $yantra
sudo git clone https://github.com/KeithDHedger/yinstalBuilds.git

Own the files:
sudo chown -R $USER:$USER yinstalBuilds
sudo ln -sv yinstalBuilds/yinstalBuildScripts yinstalBuildScripts
sudo ln -sv yinstalBuilds/yinscripts yinscripts

#If you want a swap file set up for later do:
#set count to the size of the swapfile needed.

sudo dd if=/dev/zero of=swapfile bs=1M count=512
sudo chmod 600 swapfile
sudo mkswap swapfile
sudo swapon -v swapfile

#If you are mounting a network folder over SOURCEARCHIVES & PKGARCHIVES (reccomened to save room ) you may want to set where the actual compilation takes place.
#You will need to compile in a place that can set linux permissions so an smb mount would be no good for compiling as some files need to have specific permissions.
#This is usually at $yantra/$SOURCEARCHIVES, compiling over a network is slow so you can use a local compile instead, eg:
COMPILEAT=$yantra/tmp
export COMPILEAT

3)
#cd into the lfsscripts folder
cd $yantra/yinscripts
#Set up config files !!IMPORTANT!!
#You can just press 'Return' to accept the default.
#Run:
sudo -E ./LFSSetUp

#To check config:
./ShowSystemData

4)
#Run BuildTools script:
./BuildTools-Pi

4.5)
#Mount bind external folder if set and if not already mounted.
. ./SystemData
mkdir -vp ${LFS}/${SOURCEARCHIVES}||true
mkdir -vp ${LFS}/${PKGARCHIVES}||true
if [ "X$EXTFOLDER" != "X" ];then
	sudo mount --bind $EXTFOLDER/${PKGARCHIVES} $yantra/${PKGARCHIVES}
	sudo mount --bind $EXTFOLDER/${SOURCEARCHIVES} $yantra/${SOURCEARCHIVES}
fi

5)
#Run BuildFileSystem script:
sudo ./BuildFileSystem

5.2)
#You may/will have to re-own/set perms the various folders etc, so:
sudo chown -R $USER:$USER $yantra/yinstalBuilds
#If these are not network mounts then
sudo chown -R $USER:$USER $yantra/ysarchives/$yversion $yantra/ybpackages/$yversion
sudo chmod -R 755 $yantra/ysarchives/$yversion $yantra/ybpackages/$yversion

5.5)
#Create a link from downloaded linux tarball to /ysarchives/$yversion/KERNEL to prevent re-downloading source tarball.
mkdir $yantra/ysarchives/$yversion/KERNEL
cd $yantra/ysarchives/$yversion/KERNEL
ln -sv ../SYSTEM/linux-$KERNELVERSION.tar.xz .

5.6)
#get the package manager archive via the host system:
cd $yantra/yinstalBuildScripts/admin/yinstal
wget -c --no-check-certificate "https://github.com/KeithDHedger/yinstal/archive/master.zip" -O yinstal.zip
unzip yinstal.zip

6)
#Change back to $yantra/yinscripts folder.
cd $yantra/yinscripts

#If you are building over ssh you may want to start a screen session that you can come back to later, if you haven't already.
screen

#Chroot into temporary system:
#make sure the /tools link on the host is valid
#I necessary do:
#sudo ln -sv $yantra/tools/ /tools
sudo ./Chroot system

7)
#You should now be in the chroot
#First install lfspkg:
cd /yinstalBuildScripts/admin/yinstal
BOOTSTRAP=1 ./yinstal.ybuild install

#As part of the LFSSetUp script $yantra/etc/ypkg.rc has been created to contain basic info needed by lfspkg, review and change if needed.
#Set $yantra/etc/ypkg.rc variables, make sure the SOURCEARCHIVES points to the same place as $SOURCEARCHIVES from #SystemData.local as that's where the main LFS system source files are, you can do this either from in the chroot environment or from the host with root permissions.
#At this point wget/openssl is not installed so you will get a load of complaints from lfspkg, ignore them as lfspkg will be reinstalled later with the main system.

#You should run lfspkg --setup to create the ypkg.rc file ( in /etc )
#lfspkg --setup can be run again later if you need/want to change source/build folders etc.
#For building the main system you should probably set the configure options config files in /etc and log options.
lfspkg --setup

8)
#Build main system:
cd /yinstalBuildScripts/system/system-meta

#LFSSetUp will have created a symlink to your desired init type so use:
./system-meta.ybuild install

#Or if you have changed your mind you can install a different init system like so:

#Use system-sysvinit-meta for standard sysvinit like so:
./system-sysvinit-meta.ybuild install

#Or use system-bbinit-meta.ybuildfor a busy box init system ( non standard ) like so:
./system-bbinit-meta.ybuild install

#Or for ##experimental## custom init system use:
./system-yinit-meta.ybuild install

#Or for rpi sysvinit system use:
./system-pi-sysvinit-meta.ybuild install

Wait for script to complete:
...
Have coffee
Walk the dog
...

9)
#logout from temporary system:
exit

10)
#Remove tools folder link from host and if you want to save tools archive for futre use move/copy the ${LFS}/tools-${yversion}.tar.gz somewhere safe:
sudo rm /tools
#Remove the tools folder from your LFS install disk:
sudo rm -rf $yantra/tools

11)
#Change back to $yantra/yinscripts folder and re-enter the chroot ( this time and subsequent times don't use the 'system' argument to Chroot ):
cd $yantra/yinscripts
sudo ./Chroot

12)
#You MUST rebuild lfspkg after completeing the the basic system and removing the tools folder.
#Use same process as 2)/7) EXCEPT do NOT use BOOTSTRAP=1
#If you have set any vairiable in /etc/ypkg.rc then reply 'R' ( without the quotes ) when asked about replacing files in /etc.
#If you forgot to do the above bit just re-edit /etc/ypkg.rc:

cd /yinstalBuildScripts/admin/yinstal
./yinstal.ybuild

#You may/probably want to run sudo lfspkg --setup to set up the full /etc/ypkg.rc file

13)
#No point in compiling your own kernel on pi so prebuilt one is used.
#But you may want to set up wifi now so:
cd /yinstalBuildScripts/net/wpa-supplicant/
./wpa-supplicant.ybuild install
#configure
wpa_passphrase SSID SECRET_PASSWORD > /etc/sysconfig/wpa_supplicant-wifi0.conf
#Set the country code:
sed -i '1s/^/country=GB\n/' /etc/sysconfig/wpa_supplicant-wifi0.conf

cd /yinstalBuildScripts/HelperScripts/
#dialog program not yet installed so use:
./InstallService-NoDialog wpa

#Don't forget to set up /etc/sysconfig/ifconfig.wifi0 if nessasary ( a default is created based on /ysarchives/9.0/SYSTEM/SystemData.local ).
#Disable eth0
mv  /etc/sysconfig/ifconfig.eth0 /etc/sysconfig/XXifconfig.eth0XX

#Openssh and the sshd init script is installed by the system-meta package.

#########################
# If you have trouble ssh'ing into the 'real' LFS system you may need to manually set the date if the ntpd server takes too long, eg:
ntpdate -s time.nist.gov
#########################

#Install any extra hardware/firmware packages you need ( you may have to boot into the 'real' system for this ).
#eg usb wireless package:
cd /yinstalBuildScripts/hware/RTL88x2BU-Linux-Driver
./RTL88x2BU-Linux-Driver.ybuild install

14)
#The following are optional but useful
#Before building the X server now is a good time to quickly boot into your new system and make sure all is OK, you can then reboot back to the host and continue building in the chroot or build in the 'real' system, the choice is yours but this HowTo assumes all building is done in the chroot.
#Build xorg ( experimental at the moment ):
cd /yinstalBuildScripts/xorg/xorg-meta/
./xorg-meta.ybuild install

#Samba
cd /yinstalBuildScripts/net/samba
./samba.ybuild install

#nfs
cd /yinstalBuildScripts/net/nfs-utils
./nfs-utils.ybuild install

#Fuse and stuff
cd /yinstalBuildScripts/net/sshfs
./sshfs.ybuild install

cd /yinstalBuildScripts/net/davfs2
./davfs2.ybuild install

cd /yinstalBuildScripts/net/curlftpfs
./curlftpfs.ybuild install

#System admin/security stuff
cd /yinstalBuildScripts/admin/logrotate
./logrotate.ybuild install

cd /yinstalBuildScripts/admin/fcron
./fcron.ybuild install

cd /yinstalBuildScripts/net/iptables
./iptables.ybuild install

cd /yinstalBuildScripts/net/fail2ban
./fail2ban.ybuild install

#If you are building in chroot you will pobably have to rerun the postinstall script for this package AFTER booting to the 'real' system.
cd /yinstalBuildScripts/admin/mariadb
./mariadb.ybuild install

#Kodi
#Install needed deps
cd /yinstalBuildScripts/mm/kodi
./pi-kodi-mindeps
#Add users
cd /yinstalBuildScripts/HelperScripts/
./UsersAndGroups YOURUSERNAME

#Add services
cd /yinstalBuildScripts/HelperScripts/
#Select from list, install/uninstall
./InstallService-NoDialog 
#Auto install
./InstallService-NoDialog "ntpd sshd gpm"
